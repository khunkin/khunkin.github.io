<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>KhunKin的书斋</title>
  
  
  <link href="/khunkin.github.io/atom.xml" rel="self"/>
  
  <link href="http://KunKin.github.io/"/>
  <updated>2018-03-19T08:51:47.009Z</updated>
  <id>http://KunKin.github.io/</id>
  
  <author>
    <name>Deng kunquan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>全排列</title>
    <link href="http://KunKin.github.io/2018/03/19/permutation/"/>
    <id>http://KunKin.github.io/2018/03/19/permutation/</id>
    <published>2018-03-19T08:16:26.393Z</published>
    <updated>2018-03-19T08:51:47.009Z</updated>
    
    <content type="html"><![CDATA[<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>N个数的全排列数，观察3个数的全排列数：</p><p>1 2 3</p><p>1 3 2</p><p>2 1 3</p><p>2 3 1</p><p>3 1 2</p><p>3 2 1</p><p>可以看到第一个分别是1 2 3，而各自后面所跟着的，恰恰是剩下的数的全排列，以1为例，后面的 2 3 和 3 2是2、3的全排列</p><p>又比如4个数全排列：</p><p><img src="http://img.blog.csdn.net/20170319170336573?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcWlxaTEyM2k=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="è¿éåå¾çæè¿°"></p><p>即先依字典序安排一个数在首位，而剩下的数则在后面进行全排列，这就体现出了递归的思想，由此可见我们可以用递归来处理这个问题</p><p>抽象出来就是Permutation(N){ Head(); Permutation(N-1); }</p><h2 id="代码与说明"><a href="#代码与说明" class="headerlink" title="代码与说明"></a>代码与说明</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*第一次独立写出全排列数，用纸笔辅助分析还是很简单的</span></span><br><span class="line"><span class="comment">*递归最重要的是逻辑，不要钻牛角尖。</span></span><br><span class="line"><span class="comment">*学习到了什么呢？</span></span><br><span class="line"><span class="comment">*写程序之前必须在纸上写出代码逻辑，纸张的记录能够辅助把握想法，光靠大脑来想总是顾此失彼，还会导致思路不清晰，甚至忘掉之前的思路。</span></span><br><span class="line"><span class="comment">*尤其是递归，在纸上列明逻辑便很容易写出来。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">之前的代码是</span></span><br><span class="line"><span class="comment">void permutation(char *s) &#123;</span></span><br><span class="line"><span class="comment">    if (strlen(s) == 1) &#123;</span></span><br><span class="line"><span class="comment">        printf("%c\n", s[0]);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    else &#123;</span></span><br><span class="line"><span class="comment">        int i;</span></span><br><span class="line"><span class="comment">        for (i = 0; i &lt; strlen(s); i++) &#123;</span></span><br><span class="line"><span class="comment">            printf("%c",s[i]);</span></span><br><span class="line"><span class="comment">            char s1[11] = "";</span></span><br><span class="line"><span class="comment">            char *p = s1;</span></span><br><span class="line"><span class="comment">            for (j = 0; j &lt; strlen(s); j++) &#123;</span></span><br><span class="line"><span class="comment">                if (j != i) &#123; *(p++) = s[j]; &#125;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">            permutation(s1);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">这样是有问题的，不定义before以存储已排列过的部分，则每次递归，都只打印出当前层次未确定的字符的排列。因为对每一层递归来说，上一层递归只执行一次，也就是说这层递归无论有多少情况，上一层都只打印一次。这就造成了缺项。</span></span><br><span class="line"><span class="comment">以 N=3 为例，以 1 为开头的全排列本该有两个，但是会出现 123 和 32 的结果，在第二个结果中1消失了，这是因为在递归中，处理第一位的操作只出现了一次。因此 N=3 的情况下，输出长度呈现 3 2 3 2 3 2 这样的情况。以上图的树来看，四个*的只输出一次，三个*输出4次，两个*输出12次，对应第一位被确定的情况下，第一位被打印出来的次数、第二位被打印出来的次数以及第三位的。</span></span><br><span class="line"><span class="comment">同理，N=4的情况下，输出长度会呈现 4 3 2 2 4 3 2 2 …… 这样的情况。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//以下正文</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*定义了两个参数，s指的是待全排列的子串，before则保存是已排列过的部分，如1234，1243中的12即是已排列过的部分*/</span></span><br><span class="line"><span class="comment">/*本质上说全排列是位置变动，而与具体的值无关，因此只需要稍微安排一下字符串（为了按字典序输出），就能放心地使用递归直接对子串全排列*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">permutation</span><span class="params">(<span class="keyword">char</span> *s, <span class="keyword">char</span> *before)</span> </span></span><br><span class="line"><span class="function">    <span class="title">if</span> <span class="params">(<span class="built_in">strlen</span>(s)</span> </span>== <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(before); i++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%c "</span>, before[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%c\n"</span>, s[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(s); i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> j;</span><br><span class="line">            <span class="keyword">char</span> newBefore[<span class="number">11</span>] = <span class="string">""</span>;</span><br><span class="line">          <span class="comment">/*这里之所以声明一个新的before是为了给每个下级递归分配独立的before避免冲突，事实上直接使用before会导致before一直增加元素直到数组溢出*/</span></span><br><span class="line">            </span><br><span class="line">          <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="built_in">strlen</span>(before); j++) &#123;</span><br><span class="line">                newBefore[j] = before[j];</span><br><span class="line">            &#125;</span><br><span class="line">            newBefore[<span class="built_in">strlen</span>(newBefore)] = s[i];</span><br><span class="line">            <span class="keyword">char</span> s1[<span class="number">11</span>] = <span class="string">""</span>;</span><br><span class="line">            <span class="keyword">char</span> *p = s1;</span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="built_in">strlen</span>(s); j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (j != i) &#123; *(p++) = s[j]; &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          </span><br><span class="line">          <span class="comment">/*对于每一次循环都进行一次递归调用，因为树的每个节点都有相同数量的子树，因此各自递归*/</span></span><br><span class="line">            permutation(s1, newBefore);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> s[<span class="number">11</span>] = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">int</span> N;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;N);</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">        s[i] = (<span class="keyword">char</span>) (i + <span class="string">'0'</span> + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">char</span> before[<span class="number">11</span>] = <span class="string">""</span>;</span><br><span class="line">    permutation(s, before);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot; class=&quot;headerlink&quot; title=&quot;思路&quot;&gt;&lt;/a&gt;思路&lt;/h2&gt;&lt;p&gt;N个数的全排列数，观察3个数的全排列数：&lt;/p&gt;
&lt;p&gt;1 2 3&lt;/p&gt;
&lt;p&gt;1 3 2&lt;/p&gt;
&lt;p&gt;2 1 3&lt;/p&gt;
&lt;p&gt;2 3
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://KunKin.github.io/2017/12/01/hello-world/"/>
    <id>http://KunKin.github.io/2017/12/01/hello-world/</id>
    <published>2017-12-01T11:13:48.563Z</published>
    <updated>2017-12-03T07:41:29.682Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
